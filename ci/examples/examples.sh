#!/bin/sh
set -eu
. "$(dirname "$0")/../../ci/sub/lib.sh"
cd -- "$(dirname "$0")/../.."

# Extract files from txtar and generate SVGs
main() {
  job_parseflags "$@"

  # Create temp directory for extracted files
  temp_dir=$(mktemp -d)
  
  # Create temp directory for generated SVGs when no args provided
  if [ $# -eq 0 ]; then
    temp_output_dir=$(mktemp -d)
    trap "rm -rf $temp_dir $temp_output_dir" EXIT
    output_dir="$temp_output_dir"
  else
    trap "rm -rf $temp_dir" EXIT
    output_dir="./static/img/examples"
  fi

  # Parse txtar file
  current_file=""
  while IFS= read -r line; do
    if echo "$line" | grep -q "^-- .* --$"; then
      # Extract filename from line like "-- hello --" or "-- hello.d2 --"
      filename=$(echo "$line" | sed 's/^-- \(.*\) --$/\1/')
      # Remove .d2 extension if present
      current_file=$(echo "$filename" | sed 's/\.d2$//')
      continue
    fi

    if [ -n "$current_file" ]; then
      # Skip comment lines that start with #
      if echo "$line" | grep -q "^#"; then
        continue
      fi

      # Write actual D2 content to temp file as-is
      printf "%s\n" "$line" >> "$temp_dir/$current_file.d2"
    fi
  done < ci/examples/examples.txtar

  # Generate SVGs for each extracted file with appropriate layout engines
  for d2_file in "$temp_dir"/*.d2; do
    if [ ! -f "$d2_file" ]; then
      continue
    fi

    base_name=$(basename "$d2_file" .d2)

    # Check if the test name ends with a specific layout engine
    if echo "$base_name" | grep -q "\-dagre$"; then
      # Only generate for Dagre
      layouts="dagre"
    elif echo "$base_name" | grep -q "\-elk$"; then
      # Only generate for ELK
      layouts="elk"
    elif echo "$base_name" | grep -q "\-tala$"; then
      # Only generate for TALA
      layouts="tala"
    else
      # Generate for all layout engines
      layouts="dagre elk tala"
    fi

    # Generate for the determined layout engine(s)
    for layout in $layouts; do
      output_name="example-${base_name}-${layout}"
      export JOBNAME=$output_name

      if ! _runjob_filter; then
        continue
      fi

      bigheader "$output_name"

      # Generate SVG with appropriate layout
      runjob sh_c D2_LAYOUT=$layout d2 --omit-version --theme=0 -c --pad 10 "$d2_file" "$output_dir/$output_name.svg2" &
    done
  done

  waitjobs

  # If no args provided, replace the examples directory with temp directory contents
  if [ $# -eq 0 ]; then
    rm -rf ./static/img/examples/*
    cp "$temp_output_dir"/* ./static/img/examples/
  fi

  # Generate the examples pages
  generate_examples_pages
}

generate_examples_pages() {
  # Get list of examples from txtar in order
  all_examples=""
  dagre_examples=""
  elk_examples=""
  tala_examples=""

  # Read txtar file to get examples in order
  current_file=""
  while IFS= read -r line; do
    if echo "$line" | grep -q "^-- .* --$"; then
      # Extract filename from line like "-- hello --" or "-- hello.d2 --"
      filename=$(echo "$line" | sed 's/^-- \(.*\) --$/\1/')
      # Remove .d2 extension if present
      current_file=$(echo "$filename" | sed 's/\.d2$//')
      if [ -f "$temp_dir/$current_file.d2" ]; then
        all_examples="$all_examples $current_file"
      fi
    fi
  done < ci/examples/examples.txtar

  # Categorize examples while preserving order
  for base_name in $all_examples; do
    # Check if the test name ends with a specific layout engine
    if echo "$base_name" | grep -q "\-dagre$"; then
      # Only for Dagre (layout-specific)
      dagre_examples="$dagre_examples $base_name"
    elif echo "$base_name" | grep -q "\-elk$"; then
      # Only for ELK (layout-specific)
      elk_examples="$elk_examples $base_name"
    elif echo "$base_name" | grep -q "\-tala$"; then
      # Only for TALA (layout-specific)
      tala_examples="$tala_examples $base_name"
    else
      # For all layout engines (general examples)
      dagre_examples="$dagre_examples $base_name"
      elk_examples="$elk_examples $base_name"
      tala_examples="$tala_examples $base_name"
    fi
  done

  # Generate Dagre page
  cat > docs/examples/dagre.md << 'EOF'
---
sidebar_label: Dagre
# This file is autogenerated. Do not edit.
# See ci/examples/examples.sh for generation.
---

import ExampleGrid from '@site/src/components/ExampleGrid';

# D2 examples: Dagre layout

See [/tour/dagre](/tour/dagre/).

<ExampleGrid examples={[
EOF

  for example in $dagre_examples; do
    # Generate pretty name from filename, removing layout engine suffix
    display_name=$(echo "$example" | sed 's/-dagre$//' | sed 's/-elk$//' | sed 's/-tala$//')
    # Convert to title case: replace dashes with spaces and capitalize each word
    name=$(echo "$display_name" | sed 's/-/ /g' | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) tolower(substr($i,2))}1')
    # Read the D2 code from the temp file
    code=$(cat "$temp_dir/$example.d2")

    # Use node to properly escape the code as a JavaScript string
    escaped_code=$(node -e "console.log(JSON.stringify(process.argv[1]))" "$code")
    cat >> docs/examples/dagre.md << EOF
  {
    name: '$name',
    svgContent: require('@site/static/img/examples/example-$example-dagre.svg2'),
    code: $escaped_code
  },
EOF
  done

  cat >> docs/examples/dagre.md << 'EOF'
]} layout="dagre" />
EOF

  # Generate ELK page
  cat > docs/examples/elk.md << 'EOF'
---
sidebar_label: ELK
# This file is autogenerated. Do not edit.
# See ci/examples/examples.sh for generation.
---

import ExampleGrid from '@site/src/components/ExampleGrid';

# D2 examples: ELK layout

See [/tour/elk](/tour/elk/).

<ExampleGrid examples={[
EOF

  for example in $elk_examples; do
    # Generate pretty name from filename, removing layout engine suffix
    display_name=$(echo "$example" | sed 's/-dagre$//' | sed 's/-elk$//' | sed 's/-tala$//')
    # Convert to title case: replace dashes with spaces and capitalize each word
    name=$(echo "$display_name" | sed 's/-/ /g' | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) tolower(substr($i,2))}1')
    # Read the D2 code from the temp file
    code=$(cat "$temp_dir/$example.d2")

    # Use node to properly escape the code as a JavaScript string
    escaped_code=$(node -e "console.log(JSON.stringify(process.argv[1]))" "$code")
    cat >> docs/examples/elk.md << EOF
  {
    name: '$name',
    svgContent: require('@site/static/img/examples/example-$example-elk.svg2'),
    code: $escaped_code
  },
EOF
  done

  cat >> docs/examples/elk.md << 'EOF'
]} layout="elk" />
EOF

  # Generate TALA page
  cat > docs/examples/tala.md << 'EOF'
---
sidebar_label: TALA
# This file is autogenerated. Do not edit.
# See ci/examples/examples.sh for generation.
---

import ExampleGrid from '@site/src/components/ExampleGrid';

# D2 examples: TALA layout

See [/tour/tala](/tour/tala/).

<ExampleGrid examples={[
EOF

  for example in $tala_examples; do
    # Generate pretty name from filename, removing layout engine suffix
    display_name=$(echo "$example" | sed 's/-dagre$//' | sed 's/-elk$//' | sed 's/-tala$//')
    # Convert to title case: replace dashes with spaces and capitalize each word
    name=$(echo "$display_name" | sed 's/-/ /g' | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) tolower(substr($i,2))}1')
    # Read the D2 code from the temp file
    code=$(cat "$temp_dir/$example.d2")

    # Use node to properly escape the code as a JavaScript string
    escaped_code=$(node -e "console.log(JSON.stringify(process.argv[1]))" "$code")
    cat >> docs/examples/tala.md << EOF
  {
    name: '$name',
    svgContent: require('@site/static/img/examples/example-$example-tala.svg2'),
    code: $escaped_code
  },
EOF
  done

  cat >> docs/examples/tala.md << 'EOF'
]} layout="tala" />
EOF
}

main "$@"
